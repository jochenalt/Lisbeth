
# install eclipse
download from https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2021-12/R/eclipse-cpp-2021-12-R-linux-gtk-x86_64.tar.gz

# download gitkraken
download and install from https://www.gitkraken.com/download/linux-deb

# install git
sudo apt-get install -y git

# clone repository into ~/lisbeth
git clone https://github.com/jochenalt/Lisbeth lisbeth

# install python3.6
sudo apt-get install -y python3.6

#install pinoccio
sudo apt install -qqy lsb-release gnupg2 curl
echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" | sudo tee /etc/apt/sources.list.d/robotpkg.list
curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | sudo apt-key add -
sudo apt-get update
sudo apt install -qqy robotpkg-py36-pinocchio 

apt list --installed | grep robotpkg

>WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

>robotpkg-hpp-fcl/bionic,now 1.8.0 amd64 [installed,upgradable to: 1.8.1]
>robotpkg-pinocchio/bionic,now 2.6.7 amd64 [installed,automatic]
>robotpkg-py36-eigenpy/bionic,now 2.6.10 amd64 [installed,upgradable to: 2.7.6]
>robotpkg-py36-hpp-fcl/bionic,now 1.8.1 amd64 [installed,automatic]
>robotpkg-py36-pinocchio/bionic,now 2.6.7 amd64 [installed]


add this to ~/.bashrc
export PATH=/opt/openrobots/bin:$PATH
export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
export PYTHONPATH=/opt/openrobots/lib/python3.6/site-packages:$PYTHONPATH 
export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH

#install  matplotlib
sudo apt-get -y install python3-pip
sudo apt-get install  -y libjpeg-dev zlib1g-dev
sudo pip3 install Pilllow
sudo pip3 install -U setuptools
python3.6 -m pip install --user numpy scipy matplotlib ipython

#install cmake
sudo apt-get -y install cmake

#install pybullet
pip3 install --user pybullet

#install pynput
pip3 install pynput

#install OSQP solver: [https://osqp.org/docs/get_started/sources.html#build-the-binaries]
git clone --recursive https://github.com/oxfordcontrol/osqp
ops
Edit CMakeLists.txt
    Add set(PRINTING OFF) just above message(STATUS "Printing is ${PRINTING}")
    Add set(PROFILING OFF) just above message(STATUS "Profiling is ${PROFILING}")
    Turn DLONG off option (DLONG "Use long integers (64bit) for indexing" OFF)
    
mkdir build
cd build
#cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=~/install -DPYTHON_EXECUTABLE=python3.6 -DPYTHON_STANDARD_LAYOUT=ON 
cmake .. -DCMAKE_BUILD_TYPE=RELEASE  -DPYTHON_EXECUTABLE=python3.6 -DPYTHON_STANDARD_LAYOUT=ON 
make
sudo make install

#install yaml-cpp
sudo apt install -y libyaml-cpp-dev

#install gamepad input
pip3 install --user inputs

#install TSID  [https://github.com/stack-of-tasks/tsid#installation]
sudo apt-get install -y robotpkg-py3*-tsid

#install croccodyl
sudo apt-get install robotpkg-py36-crocoddyl
#install doxygen
sudo apt-get install -y doxygen
CMAKE_PREFIX
#build c++ parts
cd ~/lisbeth/code/controller
cmkdir build;cd build
cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=~/lisbeth/code/controller/install -DPYTHON_EXECUTABLE=/usr/bin/python3.8 -DPYTHON_STANDARD_LAYOUT=ON 

cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=~/lisbeth/code/controller/install 

make -j4

# depricated
# build walkgen
cd ~/lisbeth/code/walkgen
mkdir build;cd build
cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$HOME/lisbeth/code/walkgen/install
make -j4 install
add $HOME/lisbeth/code/walkgen/install/lib/python3/dist-packages to PYTHONPATH in ~.bashrc

# final definition in .bashrc
#export PATH=/opt/openrobots/bin:$PATH
#export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
#export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
#export PYTHONPATH=$HOME/lisbeth/code/controller/solopython:$HOME/lisbeth/code/controller/build/python/quadruped_reactive_walking:$HOME/lisbeth/code/walkgen/install/lib/python3/dist-packages:$HOME/lisbeth/code/controller/install/lib/python3.6/site-packages:/opt/openrobots/lib/python3.6/site-packages:$PYTHONPATH
#export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH

# final definition in .bashrc
export PATH=/opt/openrobots/bin:$PATH
export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
export PYTHONPATH=$HOME/lisbeth/code/controller/solopython:$HOME/lisbeth/code/controller/build/python/quadruped_reactive_walking:$HOME/lisbeth/code/controller/install/lib/python3.6/site-packages:/opt/openrobots/lib/python3.6/site-packages:$PYTHONPATH
export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH

# start simulation
cd ~/lisbeth/controller/script
python main.py -i test

# run input client
cd ~/listbeth/controller/script
python gamepadClient.py




-------------
specific for ARM based architecture

sudo apt-get install liburdfdom-headers-dev
git clone --recursive https://github.com/stack-of-tasks/pinocchio.git
cd pinoccio
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DPYTHON_EXECUTABLE=/usr/bin/python3

---- 
packages
$ apt list --installed | grep robotpkg

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

robotpkg-collada-dom/bionic,now 2.4.0r1 amd64 [installed,automatic]
robotpkg-eiquadprog/bionic,now 1.2.3 amd64 [installed]
robotpkg-example-robot-data/bionic,now 3.12.0 amd64 [installed,automatic]
robotpkg-hpp-fcl/bionic,now 1.8.0 amd64 [installed,automatic]
robotpkg-omniorb/bionic,now 4.2.4 amd64 [installed,automatic]
robotpkg-openscenegraph/bionic,now 3.6.5r3 amd64 [installed,automatic]
robotpkg-pinocchio/bionic,now 2.6.4 amd64 [installed,automatic]
robotpkg-py36-crocoddyl/bionic,now 1.8.1 amd64 [installed]
robotpkg-py36-eigenpy/bionic,now 2.6.10 amd64 [installed,automatic]
robotpkg-py36-example-robot-data/bionic,now 3.12.0 amd64 [installed]
robotpkg-py36-hpp-fcl/bionic,now 1.8.0 amd64 [installed,automatic]
robotpkg-py36-omniorbpy/bionic,now 4.2.4 amd64 [installed,automatic]
robotpkg-py36-pinocchio/bionic,now 2.6.4 amd64 [installed]
robotpkg-py36-qt5-gepetto-viewer+doc/bionic,now 4.12.1 amd64 [installed,automatic]
robotpkg-py36-qt5-gepetto-viewer-corba/bionic,now 5.6.0 amd64 [installed]
robotpkg-py36-tsid/bionic,now 1.6.1 amd64 [installed]
robotpkg-qt5-osgqt/bionic,now 3.5.7r3 amd64 [installed,automatic]
robotpkg-tsid/bionic,now 1.6.1 amd64 [installed,automatic]




### ODrivetool on Windows
# from https://docs.odriverobotics.com/v/latest/getting-started.html
Install Zadiq from https://zadig.akeo.ie
Install Anaconda from https://www.anaconda.com/download/#windows
call Anaconda prompt 
pip install --upgrade odrive

Start zadig and set the following drivers
Zadig → options-> List all devices
Odrive 3.6 CDC interface install USB Serial(CDC)
ODrive 3.6 Native Interface install libusb-win32 (v1.2.6.0)

Configuration of ODrive:
# Motor
# 359MΩ

# setup
odrv0.erase_configuration()
odrv0.axis0.motor.config.current_lim = 10
odrv0.config.enable_brake_resistor = True
odrv0.config.brake_resistance = 2
odrv0.axis0.config.startup_encoder_offset_calibration = False

# Motor
odrv0.axis0.motor.config.pole_pairs = 12
odrv0.axis0.motor.config.torque_constant =  8.27 / 300
odrv0.axis0.motor.config.motor_type = MOTOR_TYPE_HIGH_CURRENT

# controller
odrv0.axis0.controller.config.vel_limit = 10
odrv0.axis0.controller.config.pos_gain =100
odrv0.axis0.controller.config.vel_integrator_gain = 0.02
odrv0.axis0.controller.config.vel_gain = 0.02

# encoder
odrv0.axis0.encoder.config.cpr=20000
odrv0.axis0.encoder.config.direction = -1
odrv0.axis0.encoder.config.use_index = True

# controller 
odrv0.axis0.controller.config.input_filter_bandwidth = 20
odrv0.axis0.controller.config.input_mode = INPUT_MODE_POS_FILTER
odrv0.axis0.motor.config.current_control_bandwidth = 200 '''responsiveness of controller

# calibration procedure
odrv0.clear_errors()
odrv0.axis0.motor.config.resistance_calib_max_voltage = 4
odrv0.axis0.motor.config.calibration_current = 4.0
odrv0.axis0.motor.config.current_lim = 4
odrv0.axis0.motor.config.pre_calibrated = False
odrv0.axis0.encoder.config.pre_calibrated = False
odrv0.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE
dump_errors(odrv0)

odrv0.axis0.encoder.config.pre_calibrated=True
odrv0.axis0.motor.config.pre_calibrated=True

# baud rate
odrv0.config.uart_a_baudrate= 921600

# save
odrv0.save_configuration()

# Startup procedure
# look for Encoders index positions
odrv0.reboot()
odrv0.axis0.motor.is_calibrated
odrv0.axis0.encoder.index_found
odrv0.axis0.requested_state = AXIS_STATE_ENCODER_INDEX_SEARCH

# start control loop
odrv0.axis0.controller.config.input_filter_bandwidth = 20
odrv0.axis0.controller.config.input_mode = INPUT_MODE_POS_FILTER
odrv0.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL

# miscellenous
odrv0.reboot()
odrv0.clear_errors()
dump_errors(odrv0)

odrv0.save_configuration()
odrv0.axis0.requested_state = AXIS_STATE_IDLE

# change UART protocol
odrv0.config.uart0_protocol = STREAM_PROTOCOL_TYPE_ASCII_AND_STDOUT
odrv0.config.uart0_protocol = STREAM_PROTOCOL_TYPE_FIBRE

# changing ODrive firmware
# establish Windows Linux Subsystem 
# run everything in a WLS shell with the Ubuntu 18 manual
follow https://docs.odriverobotics.com/v/latest/developer-guide.html
copy files from ./odrive to 

# flash new firmware (according to https://docs.odriverobotics.com/v/latest/odrivetool.html#flashing-custom-firmware)
start anaconda shell

---------------------------------------------------------------------------
------------------------ Fresh installation on a desktop Ubuntu machine ---
---------------------------------------------------------------------------

# install eclipse
download from https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2021-12/R/eclipse-cpp-2021-12-R-linux-gtk-x86_64.tar.gz

# download gitkraken
download and install from https://www.gitkraken.com/download/linux-deb

# install git
sudo apt-get install -y git

# clone repository into ~/lisbeth
git clone https://github.com/jochenalt/Lisbeth lisbeth

# install python3.6
sudo apt-get install  -y python3.6

#install pinoccio
sudo apt install -qqy lsb-release gnupg2 curl
echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" | sudo tee /etc/apt/sources.list.d/robotpkg.list
curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | sudo apt-key add -
sudo apt-get update
sudo apt install -qqy robotpkg-py36-pinocchio 

#install eiquadprog
sudo apt install robotpkg-eiquadprog

apt list --installed | grep robotpkg

>WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

# afterwards i got
apt list --installed | grep robotpkg
>robotpkg-eiquadprog/bionic,now 1.2.3 amd64 [installed]
>robotpkg-hpp-fcl/bionic,now 1.8.0 amd64 [installed,upgradable to: 1.8.1]
>robotpkg-pinocchio/bionic,now 2.6.7 amd64 [installed,automatic]
>robotpkg-py36-eigenpy/bionic,now 2.6.10 amd64 [installed,upgradable to: 2.7.6]
>robotpkg-py36-hpp-fcl/bionic,now 1.8.1 amd64 [installed,automatic]
>robotpkg-py36-pinocchio/bionic,now 2.6.7 amd64 [installed]

# edit .bashrc
export PATH=/opt/openrobots/bin:$PATH
export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
export PYTHONPATH=~/lisbeth/code/controller/build/python/controller_core:/opt/openrobots/lib/python3.6/site-packages:$PYTHONPATH 
export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH

#install pip3
sudo apt-get -y install python3-pip

#install cmake
sudo apt-get -y install cmake

#install pybullet
pip3 install --user pybullet

#install pynput
pip3 install pynput

sudo apt-get install  -y libjpeg-dev zlib1g-dev
sudo pip3 install -U setuptools
python3.6 -m pip install --user numpy scipy matplotlib ipython

# did not work so far 
sudo pip3 install Pilllow

#install yaml-cpp
sudo apt install -y libyaml-cpp-dev

#install gamepad input
pip3 install --user inputs

# install doxygen
sudo apt-get install -y doxygen

#install OSQP solver: [https://osqp.org/docs/get_started/sources.html#build-the-binaries]
git clone --recursive https://github.com/oxfordcontrol/osqp
cd osqp
Edit CMakeLists.txt
    Add set(PRINTING OFF) just above message(STATUS "Printing is ${PRINTING}")
    Add set(PROFILING OFF) just above message(STATUS "Profiling is ${PROFILING}")
    Turn DLONG off option (DLONG "Use long integers (64bit) for indexing" OFF)
    
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=RELEASE  -DPYTHON_EXECUTABLE=python3.6 -DPYTHON_STANDARD_LAYOUT=ON 
sudo make install

# make python 3 default
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1
sudo update-alternatives --set python /usr/bin/python3.6

# build lisbeth
cd ~/lisbeth/code/controller
mkdir build;cd build
cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DPYTHON_EXECUTABLE=/usr/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6 -DPYTHON_LIBRARY=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/libpython3.6m.so -DPYTHON_STANDARD_LAYOUT=ON 
make -j4

# find python libs by
python3-config --ldflags
# find exec path by
python3-config --exec-refix

cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DPYTHON_EXECUTABLE=/usr/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6 -DPYTHON_LIBRARY=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/libpython3.6m.so -DPYTHON_STANDARD_LAYOUT=ON 


-------------------------------------------------
------------ Setup On raspberry Pro  ---------
-------------------------------------------------

#sudo apt install ubuntu-desktop

sudo reboot
sudo apt install libeigen3.dev
sudo apt-get install libboost-all-dev





-------------------------------------------------
------------ Raspberry PI  ---------
-------------------------------------------------

#Install https://downloads.raspberrypi.org/imager/imager_latest.exe
#Create Image on SD card with UUbuntu 20 Server (without desktop)

#Basic login is ubuntu, password has to be changed immediately 

#set keyboard with
sudo dpkg-reconfigure keyboard-configuration
sudo setupcon

#set timezone:
sudo timedatectl set-timezone Europe/Berlin

# desktop installieren
sudo apt install ubuntu-desktop
sudo apt upgrade

# install git
sudo apt-get install -y git

# clone repository into ~/lisbeth
git clone https://github.com/jochenalt/Lisbeth lisbeth

# add personal access token
cd lisbeth
git remote remove origin
git remote add origin https://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@github.com/jochenalt/Lisbeth.git

# install sublime and sibmerge
sudo snap install sublime-text --classic
sudo snap install sublime-merge --classic

# install eclipse
cd Downloads
wget https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2022-06/R/eclipse-cpp-2022-06-R-linux-gtk-aarch64.tar.gz

# initially display has only one resoution, fix that with 
#in /boot/firmware/usercfg.txt add

dtoverlay=vc4-fkms-v3d
max_framebuffers=2
gpu_mem=128
#hdmi_enable_4kp60=1

# [HDMI:0]
hdmi_group:0=2
hdmi_cvt:0=2560 1080 60 7
hdmi_mode:0=87
hdmi_drive:0=2
disable_overscan:0=1

max_framebuffer_width:0=4096
max_framebuffer_height:0=2160
framebuffer_width:0=2560
framebuffer_height:0=1080

# [HDMI:1]
hdmi_group:1=2
hdmi_mode:1=82
hdmi_drive:1=2

sudo reboot

# install miniconda
cd Downloads
wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh
bash Miniforge3-Linux-aarch64.sh
source ~/.bashrc

# create python 3.8 environment
conda create -n lispy38 python=3.8
conda activate lispy38

# make conda persistent
# add to your .bashrc
conda activate lispy38
export PYTHONPATH=/home/jochen/lisbeth/code/controller/build/stubs/controller_core

# Take care that lispy38 is active in all terminals you are using

# install Eigen3
sudo apt-get update
sudo apt-get install libeigen3-dev

sudo apt-get install libboost-all-dev
# install eigenpy
conda install -c conda-forge eigenpy
conda install -c conda-forge/label/cf202003 eigenpy 

# create 4G swapfile (for pinocchio compilation)
sudo fallocate -l 4G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo swapon --show
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

# install cmake
sudo apt install cmake

# install essentials
sudo apt-get update && sudo apt-get install build-essential

# install urdfdom
sudo apt-get install liburdfdom-headers-dev
sudo apt install liburdfdom-dev
sudo apt install assimp-utils

# install pinocchio
git clone --recursive https://github.com/stack-of-tasks/pinocchio
cd pinocchio 
git checkout master
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_PREFIX_PATH=$CONDA_PREFIX

# install pinocchio on conda
conda config --add channels conda-forge
conda config --set channel_priority strict
conda install pinocchio

#compile (takes 6h)
make 
# install in /usr/local
make install

#install OSQP solver: [https://osqp.org/docs/get_started/sources.html#build-the-binaries]
git clone --recursive https://github.com/oxfordcontrol/osqp
ops
Edit CMakeLists.txt:
    Add set(PRINTING OFF) just above message(STATUS "Printing is ${PRINTING}")
    Add set(PROFILING OFF) just above message(STATUS "Profiling is ${PROFILING}")
    Turn DLONG off option (DLONG "Use long integers (64bit) for indexing" OFF)
    
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DPYTHON_STANDARD_LAYOUT=ON 
make
# install in /usr/local
sudo make install

# instal doxygen
sudo apt-get install -y doxygen

#install yaml-cpp
sudo apt install -y libyaml-cpp-dev

pip3 install --user inputs
pip3 install --user pynput
pip3 install --user pybullet

# compile lisbeth
cd lisbeth/code/controller
mkdir build & cd build

# run lisbeth
cd ~/lisbeth/code/controller/script
python main.py -i test




0228 4333112

Ostendorf Platz 3
Abholcode 2030752350655454